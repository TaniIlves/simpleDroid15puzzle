package ivs.ilves.simple15puzzle;

import android.content.Intent;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import java.util.Arrays;


/**
 * Main class
 */
public class MainActivity extends AppCompatActivity {
    static String[] startArray;
    private static String[] nextTurnArray;
    private static int turnCount = 0;

    /**
     * Get method for NextTurnArray.
     *
     * @return Returning changed array as global field.
     */
    public static String[] getNextTurnArray() {
        return nextTurnArray;
    }

    /**
     * Set method for NextTurnArray.
     *
     * @param nextTurnArray Setting value for changed array as global field.
     */
    public static void setNextTurnArray(String[] nextTurnArray) {
        MainActivity.nextTurnArray = nextTurnArray;
    }

    /**
     * Main Method.
     *
     * @param savedInstanceState Autogenerated param.
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        String[] randomArray;
        TextView countField = findViewById(R.id.countShow);
        Button reloadBtn = findViewById(R.id.reloadBtn);

        // Making the first array.
        if (turnCount == 0) {
            startArray = DoArrays.StartArrayGenerator();
        }

        if (getNextTurnArray() == null) {

            // Create and returning the randomized array.
            randomArray = DoArrays.RandomizeArray(startArray);

        } else {

            randomArray = getNextTurnArray();

            turnCount += 1;

            countField.setText("Count of turns: " + String.valueOf(turnCount));

            if (Arrays.equals(startArray, randomArray)) {
                countField.setText("You win!!! You make " + String.valueOf(turnCount) + " turns");
                reloadBtn.setVisibility(View.VISIBLE);
            }
        }

        // Generating the game field and returning zero button ID.
        String zeroBtnIndex = GameFieldGenerator(randomArray);

        // Setting up 4 pressable keys and recreating array with use pressed key.
        SetPressedKeys(zeroBtnIndex, randomArray);
    }

    /**
     * Generate the new game field by randomized array.
     *
     * @param randomArray Posting randomized Array of elements for game field creation.
     * @return Return "zeroBtnID" string
     */
    public String GameFieldGenerator(String[] randomArray) {

        int numberButton = 0;
        int firstIndex = 1;
        String zeroButtonID = "0";

        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; ) {
                int secondIndex = j + 1;

                String buttonIndex = "c" + (String.valueOf(firstIndex)) +
                        "x" + (String.valueOf(secondIndex));

                // Get button ID
                Button buttonID = GetButtonID(buttonIndex);

                buttonID.setText(randomArray[numberButton]);

                if (Integer.valueOf(randomArray[numberButton]) == 0) {
                    buttonID.setVisibility(View.INVISIBLE);
                    zeroButtonID = buttonIndex;
                }
                numberButton++;
                j++;
            }
            firstIndex++;
        }
        return zeroButtonID;
    }

    /**
     * Setting up buttons as may be pressed.
     *
     * @param zeroBtnID   ID for zeroBtn
     * @param randomArray Main array for setting clickable buttons.
     */
    public void SetPressedKeys(String zeroBtnID, final String[] randomArray) {

        String activeButtonH1 = "0";
        String activeButtonW1 = "0";
        String activeButtonH2 = "0";
        String activeButtonW2 = "0";

        if (!zeroBtnID.equals("0")) {
            String firstIndex = String.valueOf(zeroBtnID.charAt(1));
            String secondIndex = String.valueOf(zeroBtnID.charAt(3));

            int activeCellH1 = Integer.valueOf(secondIndex) - 1;
            int activeCellH2 = Integer.valueOf(secondIndex) + 1;
            int activeCellW1 = Integer.valueOf(firstIndex) - 1;
            int activeCellW2 = Integer.valueOf(firstIndex) + 1;

            if (activeCellH1 < 5 && activeCellH1 > 0) {
                activeButtonH1 = "c" + firstIndex + "x" + activeCellH1;
            }
            if (activeCellH2 < 5 && activeCellH2 > 0) {
                activeButtonH2 = "c" + firstIndex + "x" + activeCellH2;
            }
            if (activeCellW1 < 5 && activeCellW1 > 0) {
                activeButtonW1 = "c" + activeCellW1 + "x" + secondIndex;
            }
            if (activeCellW2 < 5 && activeCellW2 > 0) {
                activeButtonW2 = "c" + activeCellW2 + "x" + secondIndex;
            }
        }

        final String[] aroundButtons = new String[]{activeButtonW1, activeButtonH1,
                activeButtonW2, activeButtonH2};

        for (int n = 0; n < aroundButtons.length; ) {

            // Get button ID for OnClickListener
            Button buttonNumID = GetButtonID(aroundButtons[n]);

            if (!aroundButtons[n].equals("0")) {

                final int keyIndex = n;

                buttonNumID.setOnClickListener(new View.OnClickListener() {

                    /**
                     * Override onClick method for ClickListener
                     * @param v View v
                     */
                    @Override
                    public void onClick(View v) {

                        ChangePosition(aroundButtons[keyIndex], randomArray);
                        //ButtonNumID.setText("Pressed");
                    }
                });
            }
            n++;
        }
    }

    /**
     * Method for change button position.
     *
     * @param pressedKeyName Name of pressed key.
     * @param randomArray    Main array for changing, when any key was pressed.
     */
    public void ChangePosition(String pressedKeyName, String[] randomArray) {

        String valuePressedKey;
        Integer zeroKeyPos = null;
        Integer pressedKeyPos = null;

        // Get pressed button ID.
        Button pressedBtn = GetButtonID(pressedKeyName);

        valuePressedKey = String.valueOf(pressedBtn.getText());

        int posNum = 0;
        for (String aRandomArray : randomArray) {
            if (aRandomArray.equals(valuePressedKey)) {
                pressedKeyPos = posNum;
            }
            if (aRandomArray.equals("0")) {
                zeroKeyPos = posNum;
            }
            posNum++;
        }

        if (pressedKeyPos != null && zeroKeyPos != null) {
            String temp = randomArray[pressedKeyPos];
            randomArray[pressedKeyPos] = randomArray[zeroKeyPos];
            randomArray[zeroKeyPos] = temp;
        }

        MainActivity.setNextTurnArray(randomArray);

        overridePendingTransition(0, 0);
        Intent refresh = new Intent(this, MainActivity.class);
        startActivity(refresh);
        overridePendingTransition(0, 0);
        this.finish();
    }

    public Button GetButtonID(String buttonName) {
        int resID = getResources().getIdentifier(buttonName, "id", getPackageName());
        return findViewById(resID);
    }
}
///******///   TRASH CODE AREA   ///******///


//recreate();

//    public static String[] StartArrayGenerator() {
//
//        int arrayLength = 16;
//        String[] startArray = new String[arrayLength];
//
//        for (int i = 0; i < arrayLength; i++) {
//            startArray[i] = String.valueOf(i);
//        }
//
//
//        return startArray;
//    }

//    /**
//     * Create the new randomized Array for starting new game.
//     *
//     * @param startArray Starting array.
//     * @return Return the randomized "randomArray".
//     */
//    public String[] RandomizeArray(String[] startArray) {
//
//        String[] randomArray = startArray;
//        Collections.shuffle(Arrays.asList(randomArray));
//
//        return randomArray;
//    }


    /*
    public Integer CheckWin(String[] nextTurnArray, String[] startArray) {

        AlertDialog.Builder ad;
        Context context;

        boolean compareResult = compareArrays(startArray, nextTurnArray);

        if (compareResult) {

            context = MainActivity.this;
            String title = "You won!!!";
            String message = "Do you want to continue?";
            String reloadBtn = "Start again";
            String exitBtn = "Exit";

            ad = new AlertDialog.Builder(context);
            ad.setTitle(title);  // заголовок
            ad.setMessage(message); // сообщение
            ad.setPositiveButton(reloadBtn, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int arg1) {
                    Toast.makeText(context, "Вы сделали правильный выбор",
                            Toast.LENGTH_LONG).show();
                    resultCode = 1;
                }
            });
            ad.setNegativeButton(exitBtn, new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int arg1) {
                    Toast.makeText(context, "Возможно вы правы", Toast.LENGTH_LONG)
                            .show();
                    resultCode = 2;
                }
            });
            ad.setCancelable(true);
            ad.setOnCancelListener(new DialogInterface.OnCancelListener() {
                public void onCancel(DialogInterface dialog) {
                    Toast.makeText(context, "Вы ничего не выбрали",
                            Toast.LENGTH_LONG).show();
                    resultCode = 0;
                }
            });

        } else {
            resultCode = 0;
        }
        return resultCode;
    }

    public static boolean compareArrays(String[] startArray, String[] randomArray) {
        boolean result = false;
        if (randomArray != null) {
            for (int i = 0; i < randomArray.length; i++) {
                if (randomArray[i].equals(startArray[i])) {

                    result = true;

                }
            }
        }

        return result;
    }

    */